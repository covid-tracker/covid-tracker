{"version":3,"sources":["components/Widget.jsx","components/LogoMain.jsx","components/Footer.jsx","components/LineGraph.jsx","components/BarGraph.jsx","components/Map.jsx","App.js","serviceWorker.js","index.js"],"names":["Widget","this","props","widgetData","TotalConfirmed","TotalRecovered","TotalDeaths","className","style","textAlign","div","whileHover","scale","whileTap","x","y","Component","LogoMain","Footer","href","LineGraph","lineGraphFinalFunction","width","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","dot","animationDuration","type","strokeWidth","BarGraph","_onBarClick","obj","$event","province","activePayload","payload","setState","dataForLineGraph","state","lineGraphHandler","barChartInfo","map","e","Province","cases","Cases","maxBarSize","layout","paddingBottom","onClick","orientation","fill","barSize","radius","padding","color","cursor","background","borderRadius","fontSize","Map","viewport","latitude","longitude","zoom","showPopup","minWidth","maxWidth","mapboxApiAccessToken","onViewportChange","mapStyle","markerData","parseFloat","Lat","Lon","provinceDataURL","App","provinceData","provinceInfo","canadianSummary","provinceName","date","Date","provinceGraph","singleProvince","provinceHistoricalData","canadianSummaryAll","filter","finalizedCases","historicalProvinceDataForGraph","functionForLineGraph","provinceInfoForLineGraph","filteredSpecificProvince","canadianSummaryLineGraph","fullProvinceTimeline","coordinateValues","fromDate","toDate","fromDateAll","toDateAll","canadianSummaryBarGraph","canadianSummaryCanada","handOffToLineGraph","filteredEmptyString","graphComponentData","interpolation","polar","lineGraphData","bind","axios","url","method","params","from","to","Countries","lineGraphArray","intial","opacity","animate","translate","duration","graphStyle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c0bb4d26.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { motion } from \"framer-motion\";\n\nclass Widget extends Component {\n  render() {\n    const {\n      TotalConfirmed,\n      TotalRecovered,\n      TotalDeaths,\n    } = this.props.widgetData;\n    return (\n      <div className=\"customBox shadowTwo\" style={{ textAlign: \"center\" }}>\n        <h1 className=\"title\">National Live Count</h1>\n        <div className=\"is-multiline columns\">\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n            className=\"column widBox widgetOne shadowThree\"\n          >\n            <h3>CASES</h3>\n            <h2>{TotalConfirmed - 91680}</h2>\n          </motion.div>\n\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n            className=\"column widBox widgetThree shadowThree\"\n          >\n            <h3>RECOVERED</h3>\n            <h2>{TotalRecovered}</h2>\n          </motion.div>\n\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n            className=\"column widBox widgetTwo shadowThree\"\n          >\n            <h3>DEATHS</h3>\n            <h2>{TotalDeaths}</h2>\n          </motion.div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Widget;\n","import React, { Component } from \"react\";\n\nclass LogoMain extends Component {\n  render() {\n    return (\n      <section className=\"customBox shadowTwo\">\n        <div style={{ textAlign: \"center\" }}>\n          <h1 className=\"title\" style={{ textAlign: \"center\" }}>\n            Canada COVID-19 Tracker\n          </h1>\n          <p className=\"subtitle\">Provincial Case Numbers</p>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default LogoMain;\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  render() {\n    return (\n      <section className=\"customBox boxTwo shadow\">\n        <footer className=\"footer\">\n          <div className=\"content has-text-centered\">\n            <p>\n              Developed by{\" \"}\n              <a href=\"https://vipinkirthane.com/\">Vipin Kirthane</a> &\n              <a href=\"http://keil.ca/\"> Keil Martin</a>\n            </p>\n          </div>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from \"recharts\";\n\nclass LineGraph extends Component {\n  render() {\n    const { lineGraphFinalFunction } = this.props;\n    return (\n      <div className=\"customBox shadowTwo\">\n        <LineChart\n          width={400}\n          height={480}\n          data={lineGraphFinalFunction}\n          margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray=\"1 1\" />\n          <XAxis dataKey=\"date\" stroke=\"#f35163\" />\n          <YAxis stroke=\"#f35163\" />\n          <Tooltip />\n          <Line\n            dot={false}\n            animationDuration={3000}\n            type=\"monotone\"\n            dataKey=\"cases\"\n            stroke=\"#4f7cff\"\n            strokeWidth=\"6\"\n          />\n        </LineChart>\n      </div>\n    );\n  }\n}\nexport default LineGraph;\n","import React, { Component } from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\n\nclass BarGraph extends Component {\n  constructor() {\n    super();\n    this.state = {\n      dataForLineGraph: null,\n      // isLoaded: false,\n    };\n  }\n\n  _onBarClick = (obj, $event) => {\n    // if (!obj || !$event != null) {\n    //   return false;\n    // console.log(`Failed`);\n    //   // Captures the chart element you click\n    //   // Contained in that is the attributes for province and cases at some depth in the object\n    // } else {\n    const province = obj.activePayload[0].payload.province;\n    // const caseCount = obj.activePayload[0].payload.cases;\n    // alert(`You select ${province}, which has ${caseCount} cases`);\n    this.setState({\n      dataForLineGraph: province,\n      // init: 1,\n    });\n    // You have the data you need now to use React Hooks to stoare this as global state that your Victory Chart can read from\n    // }\n  };\n\n  render() {\n    const { dataForLineGraph } = this.state;\n    const { lineGraphHandler, barChartInfo } = this.props;\n    return (\n      <div className=\"customBox\" style={{ width: \"100%\", height: 650 }}>\n        <ResponsiveContainer>\n          <BarChart\n            data={barChartInfo.map((e) => {\n              return e.Province !== \"\"\n                ? { province: e.Province, cases: e.Cases }\n                : {};\n            })}\n            maxBarSize={20}\n            layout={\"vertical\"}\n            style={{ paddingBottom: 20 }}\n            onClick={this._onBarClick}\n          >\n            <CartesianGrid strokeDasharray=\"1 1\" />\n            <XAxis type={\"number\"} orientation={\"bottom\"} stroke=\"#f35163\" />\n            <YAxis\n              type={\"category\"}\n              orientation={\"left\"}\n              dataKey={\"province\"}\n              stroke=\"#f35163\"\n            />\n            <Tooltip onClick={() => lineGraphHandler(dataForLineGraph)} />\n            <Bar\n              dataKey=\"cases\"\n              fill=\"#4f7cff\"\n              barSize={30}\n              radius={2}\n              onClick={() => lineGraphHandler(dataForLineGraph)}\n            />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  }\n}\n\nexport default BarGraph;\n","import React, { Component } from \"react\";\nimport ReactMapGL, { Marker } from \"react-map-gl\";\n\nconst style = {\n  padding: \"3px 10px\",\n  color: \"#fff\",\n  cursor: \"pointer\",\n  background: \"#111\",\n  borderRadius: \"50px\",\n  fontSize: 15,\n};\n\nclass Map extends Component {\n  state = {\n    viewport: {\n      width: \"auto\",\n      height: 500,\n      latitude: 57,\n      longitude: -96.81,\n      zoom: 2.3,\n    },\n    showPopup: true,\n  };\n\n  render() {\n    return (\n      <div className=\"customBox shadowTwo\" style={{ textAlign: \"center\" }}>\n        <ReactMapGL\n          style={{ minWidth: \"100%\", maxWidth: \"100%\" }}\n          {...this.state.viewport}\n          mapboxApiAccessToken={\n            \"pk.eyJ1IjoieGVub2pheCIsImEiOiJjazk5MDlpNDEwN2o2M21ueDVoNXQ1eWpnIn0.-Sy_LkU_ZYcmyH09Zl-MYw\"\n          }\n          onViewportChange={(viewport) => this.setState({ viewport })}\n          mapStyle=\"mapbox://styles/mapbox/dark-v10\"\n        >\n          {this.props.markerData.map((province) => {\n            return (\n              <Marker\n                latitude={parseFloat(province.Lat)}\n                longitude={parseFloat(province.Lon)}\n                // closeButton={true}\n                // closeOnClick={false}\n                // onClose={() => this.setState({ showPopup: false })}\n                // anchor=\"top\"\n                // dynamicPosition={false}\n              >\n                <div style={style}>\n                  {/* {province.Cases !== \"\" ? province.Cases : null} */}\n                  {province.Cases}\n                </div>\n              </Marker>\n            );\n          })}\n        </ReactMapGL>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Widget from \"./components/Widget\";\nimport LogoMain from \"./components/LogoMain\";\nimport Footer from \"./components/Footer\";\n\n// Rechart Graphs\nimport LineGraph from \"./components/LineGraph\";\nimport BarGraph from \"./components/BarGraph\";\n\n// MapBox\nimport Map from \"./components/Map\";\n\n// Framer Motion for animations\nimport { motion } from \"framer-motion\";\n\n// URLs\nconst provinceDataURL =\n  \"https://api.covid19api.com/country/canada/status/confirmed/live\";\nconst summaryDataURL = \"https://api.covid19api.com/summary\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      fromDate: \"2020-05-30T00:00:00Z\",\n      toDate: \"2020-05-30T01:00:00Z\",\n      fromDateAll: \"\",\n      toDateAll: \"\",\n      canadianSummaryLineGraph: [],\n      canadianSummaryAll: [],\n      canadianSummaryBarGraph: [],\n      canadianSummaryCanada: [],\n      provinceData: [],\n      historicalProvinceDataForGraph: [],\n      handOffToLineGraph: [],\n      filteredEmptyString: [],\n      graphComponentData: {\n        interpolation: \"natural\",\n        polar: false,\n      },\n      lineGraphData: \"\",\n      fullProvinceTimeline: \"\",\n      // init:0,\n    };\n    this.coordinateValues = this.coordinateValues.bind(this);\n  }\n\n  // async componentDidMount() {\n  //   let fromDate = new Date();\n  //   fromDate.setHours(-8, 0, 0, 0);\n  //   fromDate = fromDate.toISOString().split(\".\")[0] + \"Z\";\n  //   let toDate = new Date();\n  //   toDate.setHours(-5, 0, 0, 0);\n  //   toDate = toDate.toISOString().split(\".\")[0] + \"Z\";\n  //   const response = await axios({\n  //     url: \"https://api.covid19api.com/country/canada/status/confirmed/live\",\n  //     method: \"GET\",\n  //     params: {\n  //       from: \"2020-04-29T01:00:00Z\",\n  //       to: \"2020-04-29T02:00:00Z\",\n  //     },\n  //   }).catch((err) => console.log(err, \"An Error occured\"));\n  //   this.setState({\n  //     canadianSummary: response.data,\n  //     fromDate,\n  //     toDate,\n  //   });\n  // }\n\n  async componentDidMount() {\n    const { fromDate, toDate, fromDateAll, toDateAll } = this.state;\n\n    const { data: canadianSummaryLineGraph } = await axios({\n      url: provinceDataURL,\n      method: `GET`,\n    });\n\n    const { data: canadianSummaryAll } = await axios({\n      url: provinceDataURL,\n      method: `GET`,\n      params: {\n        from: fromDate,\n        to: toDate,\n      },\n    });\n\n    const { data: canadianSummaryBarGraph } = await axios({\n      url: provinceDataURL,\n      method: `GET`,\n      params: {\n        from: fromDate,\n        to: toDate,\n      },\n    });\n\n    const { data: canadianSummaryCanada } = await axios({\n      url: summaryDataURL,\n      method: `GET`,\n      params: {\n        from: fromDateAll,\n        to: toDateAll,\n      },\n    });\n\n    this.setState({\n      canadianSummaryBarGraph,\n      canadianSummaryLineGraph,\n      canadianSummaryAll,\n      canadianSummaryCanada: canadianSummaryCanada.Countries[30],\n    });\n  }\n\n  // filteredEmptyString = () => {\n  //   let rawBarData = this.state.canadianSummaryBarGraph.filter((Boolean) => {\n  //     return {\n  //       province: Boolean.Province,\n  //     };\n  //   });\n  //   this.setState({\n  //     filteredEmptyString: rawBarData,\n  //   });\n  // };\n\n  provinceData = () => {\n    let provinceInfo = this.state.canadianSummary.map((provinceName) => {\n      return {\n        province: provinceName.Province,\n        cases: provinceName.Cases,\n        date: provinceName.Date,\n      };\n    });\n    this.setState({\n      provinceData: provinceInfo,\n    });\n  };\n\n  // dateFunction = () => {\n  //   let date = new Date();\n  //   date.setDate(date.getDate() - 1);\n  //   date.setHours(-4);\n  //   date.setMinutes(0);\n  //   date.setSeconds(0);\n  //   let yesterdayString = date.toISOString().split(\".\")[0] + \"Z\";\n  //   date.setHours(0);\n  //   let yesterdayStringTime = date.toISOString().split(\".\")[0] + \"Z\";\n  //   this.setState({\n  //     fromDate: yesterdayString,\n  //     toDate: yesterdayStringTime,\n  //   });\n  // };\n\n  provinceGraph = (singleProvince) => {\n    let provinceHistoricalData = this.state.canadianSummaryAll.filter(\n      (provinceName) => {\n        if (provinceName.Province === singleProvince.Province) {\n          return {\n            finalizedCases: provinceName,\n          };\n        }\n      }\n    );\n    this.setState({\n      historicalProvinceDataForGraph: provinceHistoricalData,\n    });\n  };\n\n  provinceData = () => {\n    let provinceInfo = this.state.canadianSummary.map((provinceName) => {\n      return {\n        province: provinceName.Province,\n        cases: provinceName.Cases,\n        date: provinceName.Date,\n      };\n    });\n    this.setState({\n      provinceData: provinceInfo,\n    });\n  };\n\n  functionForLineGraph = (provinceInfoForLineGraph) => {\n    let filteredSpecificProvince = this.state.canadianSummaryLineGraph.filter(\n      (e) => {\n        return e.Province === provinceInfoForLineGraph\n          ? {\n              cases: e.Cases,\n              date: e.Date,\n            }\n          : null;\n      }\n    );\n    this.setState(\n      {\n        fullProvinceTimeline: filteredSpecificProvince,\n      },\n      () => {\n        this.coordinateValues();\n      }\n    );\n  };\n\n  coordinateValues() {\n    let lineGraphArray = this.state.fullProvinceTimeline.map((e) => {\n      let data = { date: e.Date, cases: e.Cases };\n      return data;\n    });\n    this.setState({\n      handOffToLineGraph: lineGraphArray,\n    });\n  }\n\n  render() {\n    const {\n      canadianSummaryBarGraph,\n      canadianSummaryAll,\n      canadianSummaryCanada,\n      graphComponentData,\n      handOffToLineGraph,\n    } = this.state;\n    return (\n      <motion.div>\n        <main className=\"section\">\n          <motion.div\n            intial={{\n              opacity: 0,\n            }}\n            animate={{\n              opacity: 1,\n            }}\n            translate={{\n              duration: 5,\n            }}\n          >\n            <section className=\"columns\">\n              <div className=\"column is-3\">\n                <BarGraph\n                  barChartInfo={canadianSummaryBarGraph}\n                  lineGraphHandler={this.functionForLineGraph}\n                />\n              </div>\n              <div className=\"column is-5\">\n                <LogoMain />\n                <motion.div whileHover={{ scale: 1.3, y: \"-20px\" }}>\n                  <Map markerData={canadianSummaryAll} />\n                </motion.div>\n              </div>\n              <div className=\"column is-4\">\n                <Widget widgetData={canadianSummaryCanada} />\n                <motion.div\n                  whileHover={{ scale: 1.1 }}\n                  whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n                >\n                  <LineGraph\n                    graphStyle={graphComponentData}\n                    lineGraphFinalFunction={handOffToLineGraph}\n                  />\n                </motion.div>\n              </div>\n            </section>\n            <Footer />\n          </motion.div>\n        </main>\n      </motion.div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}