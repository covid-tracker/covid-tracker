{"version":3,"sources":["components/Widget.jsx","components/WidgetTwo.jsx","components/LogoMain.jsx","components/LineGraph.jsx","components/BarGraph.jsx","components/Map.jsx","App.js","serviceWorker.js","index.js"],"names":["Widget","state","canadianSummaryCanada","axios","url","method","data","this","setState","Countries","console","log","TotalConfirmed","TotalRecovered","TotalDeaths","NewConfirmed","NewRecovered","NewDeaths","className","style","textAlign","div","whileHover","scale","whileTap","x","y","Component","WidgetTwo","props","widgetDataTwo","confirmed","active","deaths","recovered","fatality_rate","LogoMain","onClick","e","window","alert","LineGraph","lineGraphRender","lineGraphFinalFunction","length","animate","transition","ease","duration","loop","Infinity","fontSize","color","height","display","alignItems","width","aspect","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","dot","animationDuration","type","strokeWidth","BarGraph","dataForLineGraph","dataForProvincialStats","barChartInfo","map","Region","province","Province","Cases","Confirmed","maxBarSize","layout","paddingBottom","onBarClick","orientation","fill","barSize","radius","padding","cursor","background","borderRadius","Map","viewport","latitude","longitude","zoom","isDrabble","cluster","clusterRadius","showPopup","minWidth","maxWidth","mapboxApiAccessToken","onViewportChange","mapStyle","markerData","parseFloat","Lat","Lon","newApiResponse","App","newApi","widgetDataData","allProvinceData","handOffToLineGraphTwo","allRegionProvinceData","canadianSummaryLineGraph","canadianSummaryAll","handOffToLineGraph","loading","graphComponentData","interpolation","polar","fullProvinceTimeline","fromDate","Date","toDate","setHours","toISOString","split","dailyDate","slice","params","iso","date","headers","newApiWidget","from","to","firstDataGather","allProvincialStats","provinceDataSets","Active","Deaths","Fatality","Recovered","region","secondDataGather","allProvincialStatsRegions","provinceDataSetsTwo","Latitude","lat","Longitude","long","coordinateValuesTwo","lineGraphArray","secondaryColor","lineGraphHandler","functionForLineGraph","widgetData","graphStyle","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dc44f513.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport { motion } from \"framer-motion\";\n\nconst summaryDataURL = \"https://api.covid19api.com/summary\";\n\nclass Widget extends Component {\n    constructor() {\n    super();\n    this.state = {\n      canadianSummaryCanada: [],\n    };\n  }\n\n  async componentDidMount() {\n    const { data: canadianSummaryCanada } = await axios({\n      url: summaryDataURL,\n      method: `GET`,\n    });\n\n    this.setState({\n      canadianSummaryCanada: canadianSummaryCanada.Countries[30],\n    });\n    console.log(this.state.canadianSummaryCanada)\n  }\n\n  render() {\n    const {\n      TotalConfirmed,\n      TotalRecovered,\n      TotalDeaths,\n      NewConfirmed,\n      NewRecovered,\n      NewDeaths\n    } = this.state.canadianSummaryCanada;\n\n    return (\n      <div className=\"customBox shadowTwo\" style={{ textAlign: \"center\" }}>\n        <h1 className=\"title\">National Live Count</h1>\n        <div className=\"is-multiline columns\">\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n            className=\"column widBox widgetOne shadowThree\"\n          >\n            <h3>CASES</h3>\n            <h2>{TotalConfirmed}</h2>\n          </motion.div>\n\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n            className=\"column widBox widgetThree shadowThree\"\n          >\n            <h3>RECOVERED</h3>\n            <h2>{TotalRecovered}</h2>\n          </motion.div>\n\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n            className=\"column widBox widgetTwo shadowThree\"\n          >\n            <h3>DEATHS</h3>\n            <h2>{TotalDeaths}</h2>\n          </motion.div>\n        </div>\n\n        <div className=\"is-multiline columns\">\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n            className=\"column widBox widgetOne shadowThree\"\n          >\n            <h3>RECENT</h3>\n            <h2>{NewConfirmed}</h2>\n          </motion.div>\n\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n            className=\"column widBox widgetThree shadowThree\"\n          >\n            <h3>RECENT DEATHS</h3>\n            <h2>{NewDeaths}</h2>\n          </motion.div>\n\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n            className=\"column widBox widgetTwo shadowThree\"\n          >\n            <h3>RECENT RECOVERIES</h3>\n            <h2>{NewRecovered}</h2>\n          </motion.div>\n        </div>\n      </div>\n      \n    );\n  }\n}\n\nexport default Widget;\n","import React, { Component } from \"react\";\nimport { motion } from \"framer-motion\";\n\nclass WidgetTwo extends Component {\n  render() {\n    const {\n      confirmed,\n      active,\n      deaths,\n      recovered,\n      fatality_rate,\n    } = this.props.widgetDataTwo;\n    return (\n      <div className=\"customBox shadowTwo\" style={{ textAlign: \"center\" }}>\n        <h1 className=\"title\">Ontario Live Count</h1>\n        <div className=\"is-multiline columns\">\n\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n            className=\"column widBox widgetOne shadowThree\"\n          >\n            <h3>CASES</h3>\n            <h2>{confirmed}</h2>\n          </motion.div>\n\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n            className=\"column widBox widgetThree shadowThree\"\n          >\n            <h3>ACTIVE CASES</h3>\n            <h2>{active}</h2>\n          </motion.div>\n\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n            className=\"column widBox widgetTwo shadowThree\"\n          >\n            <h3>DEATHS</h3>\n            <h2>{deaths}</h2>\n          </motion.div>\n        </div>\n\n        <div className=\"is-multiline columns\">\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n            className=\"column widBox widgetOne shadowThree\"\n          >\n            <h3>RECOVERED</h3>\n            <h2>{recovered}</h2>\n          </motion.div>\n\n          <motion.div\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n            className=\"column widBox widgetThree shadowThree\"\n          >\n            <h3>FATALITY RATE</h3>\n            <h2>{fatality_rate}</h2>\n          </motion.div>\n\n        </div>\n      </div>\n      \n    );\n  }\n}\n\nexport default WidgetTwo;","import React, { Component } from \"react\";\n\nclass LogoMain extends Component {\n  render() {\n    return (\n      <section className=\"customBox shadowTwo\">\n        <div style={{ textAlign: \"center\" }}>\n          <h1 className=\"title\" style={{ textAlign: \"center\" }}>\n            Canada COVID-19 Tracker\n          </h1>\n          <p className=\"subtitle\">Provincial Case Numbers</p>\n          <button className=\"alertButton\"\n            onClick={(e) => window.alert('covid19api.com is missing \"Canada\" object from the array (I added a console.log to show the array where you can see this), Their dev team is working on a fix, Update coming soon, check back!')}>\n            Important! - Click me first!\n          </button>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default LogoMain;\n","import React, { Component } from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { motion } from \"framer-motion\";\n\nclass LineGraph extends Component {\n  lineGraphRender = () => {\n    if (this.props.lineGraphFinalFunction.length === 0) {\n      return (\n        <motion.div\n          animate={{ scale: [1, 1.05, 1] }}\n          transition={{ ease: \"linear\", duration: 2, loop: Infinity }}\n        >\n          <h2\n            className=\"customBox shadowTwo\"\n            style={{\n              fontSize: \"2rem\",\n              color: \"#f35163\",\n              textAlign: \"center\",\n              height: \"40rem\",\n              display: \"flex\",\n              alignItems: \"center\",\n            }}\n          >\n            CLICK A PROVINCE FROM \"BAR GRAPH\" TO DISPLAY CASE DATA\n          </h2>\n        </motion.div>\n      );\n    } else {\n      return (\n        <div className=\"customBox shadowTwo\">\n          <h3 style={{ textAlign: \"center\", color: \"white\", fontSize: 13 }}>\n            Province Cases\n          </h3>\n          <ResponsiveContainer width=\"100%\" aspect={3.5 / 3.75}>\n            <LineChart\n              // width={510}\n              // height={430}\n              data={this.props.lineGraphFinalFunction}\n              margin={{ top: 5, right: 10, left: 0, bottom: 5 }}\n              style={{ margin: \"0 auto\" }}\n            >\n              <CartesianGrid strokeDasharray=\"1 1\" />\n              <XAxis dataKey=\"Date\" stroke=\"#f35163\" />\n              <YAxis stroke=\"#f35163\" />\n              <Tooltip />\n              <Line\n                dot={false}\n                animationDuration={3000}\n                type=\"monotone\"\n                dataKey=\"Cases\"\n                stroke=\"#4f7cff\"\n                strokeWidth=\"6\"\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      );\n    }\n  };\n\n  render() {\n    return <div>{this.lineGraphRender()}</div>;\n  }\n}\nexport default LineGraph;\n","import React, { Component } from \"react\";\n\nimport { motion } from \"framer-motion\";\n\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\n\nclass BarGraph extends Component {\n  constructor() {\n    super();\n    this.state = {\n      dataForLineGraph: null,\n      dataForProvincialStats: null,\n    };\n  }\n\n  // This was a function sending the results of what the user clicked as props back to app.js then again down to lineGraph.jsx, unfortunatly the api is not returning the calls for provincial data at the moment so this is not bing used for the time being. // \n\n  // onBarClick = (obj) => {\n  //   let province = obj.activePayload[0].payload.State;\n  //   this.setState({ dataForLineGraph: province}, () => {\n  //     this.props.lineGraphHandler(this.state.dataForLineGraph);\n  //   });\n  // };\n\n  render() {\n    const { barChartInfo } = this.props;\n    return (\n      <motion.div whileTap={{ scale: 1.1, x: \"-5px\", y: \"5px\" }}>\n        <div className=\"customBox\" style={{ textAlign: \"center\", width: \"100%\", height: 740 }}>\n          <h1 className=\"barGraphTitle\">Total Confirmed Cases</h1>\n          <ResponsiveContainer>\n            <BarChart\n              data={barChartInfo.map((e) => {\n                return e.Region.province !== \"\"\n                  ? { Province: e.Region.province, Cases: e.Confirmed}\n                  : null;\n              })}\n              maxBarSize={20}\n              layout={\"vertical\"}\n              style={{ paddingBottom: 20 }}\n              onClick={this.onBarClick}\n            >\n              <CartesianGrid strokeDasharray=\"1 1\" />\n              <XAxis type={\"number\"} orientation={\"bottom\"} stroke=\"#f35163\" />\n              <YAxis\n                type={\"category\"}\n                orientation={\"left\"}\n                dataKey={\"Province\"}\n                stroke=\"#f35163\"\n              />\n              <Tooltip />\n              <Bar dataKey=\"Cases\" fill=\"#4f7cff\" barSize={37} radius={2} />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </motion.div>\n    );\n  }\n}\n\nexport default BarGraph;\n","import React, { Component } from \"react\";\nimport ReactMapGL, { Marker } from \"react-map-gl\";\n//\nconst style = {\n  padding: \"3px 10px\",\n  color: \"#fff\",\n  cursor: \"pointer\",\n  background: \"#111\",\n  borderRadius: \"50px\",\n  fontSize: 15,\n};\n\nclass Map extends Component {\n  state = {\n    viewport: {\n      width: \"auto\",\n      height: 716,\n      latitude: 56,\n      longitude: -97.81,\n      zoom: 3,\n      isDrabble: \"false\",\n      cluster: \"true\",\n      clusterRadius: 80,\n    },\n    showPopup: true,\n  };\n\n  render() {\n    // console.log(this.props.markerData)\n    return (\n      <div className=\"customBox shadowTwo\" style={{ textAlign: \"center\" }}>\n        <ReactMapGL\n          style={{ minWidth: \"100%\", maxWidth: \"100%\" }}\n          {...this.state.viewport}\n          mapboxApiAccessToken={\n            \"pk.eyJ1IjoieGVub2pheCIsImEiOiJjazk5MDlpNDEwN2o2M21ueDVoNXQ1eWpnIn0.-Sy_LkU_ZYcmyH09Zl-MYw\"\n          }\n          onViewportChange={(viewport) => this.setState({ viewport })}\n          mapStyle=\"mapbox://styles/mapbox/dark-v10\"\n        >\n          {this.props.markerData.map((province) => {\n            return (\n              <Marker\n                latitude={parseFloat(province.Lat)}\n                longitude={parseFloat(province.Lon)}\n              >\n                <div style={style}>{province.Cases}</div>\n                <div style={style}>{province.Cases}</div>\n              </Marker>\n            );\n          })}\n        </ReactMapGL>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport { motion } from \"framer-motion\"; //Framer motion for animations //\nimport Loader from \"react-loader-spinner\"; // Loading screen //\n\nimport Widget from \"./components/Widget\"; // Widget made for the total stats in top right corner // \nimport WidgetTwo from \"./components/WidgetTwo\"; // Widget made for the total stats in top right corner // \nimport LogoMain from \"./components/LogoMain\"; \nimport LineGraph from \"./components/LineGraph\"; // Rechart Graphs // \nimport BarGraph from \"./components/BarGraph\"; // Rechart Graphs // \nimport Map from \"./components/Map\"; // MapBox //\n\n// URLs, Currently taking care of the total National Figures // \nconst provinceDataURL =\"https://api.covid19api.com/country/canada/status/confirmed/live\";\nconst summaryDataURL = \"https://api.covid19api.com/summary\";\n\n// New URLs, currently taking care of the provincial stats // \nconst newApiResponse = \"https://covid-19-statistics.p.rapidapi.com/reports\"\n// const newApiResponseDate = \"https://covid-19-statistics.p.rapidapi.com/provinces\"\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      newApi: [],\n      widgetDataData: [],\n      // newApiDate: [],\n      allProvinceData: [],\n\n      handOffToLineGraphTwo: [],\n\n\n      allRegionProvinceData: [],\n      canadianSummaryLineGraph: [],\n      canadianSummaryAll: [],\n      canadianSummaryCanada: [],\n      handOffToLineGraph: [],\n      loading: true,\n      graphComponentData: {\n        interpolation: \"natural\",\n        polar: false,\n      },\n      fullProvinceTimeline: \"\",\n    };\n    // this.coordinateValues = this.coordinateValues.bind(this);\n  }\n\n  async componentDidMount() {\n    // To generate today's date on first api // \n    let fromDate = new Date();\n    let toDate = new Date();\n    // Adjusting time to get yesterday's date on first api // \n    fromDate.setHours(-30, 0, 0, 0);\n    toDate.setHours(-27, 0, 0, 0);\n    // fromDate and toDate Range on first api // \n    fromDate = fromDate.toISOString().split(\".\")[0] + \"Z\";\n    toDate = toDate.toISOString().split(\".\")[0] + \"Z\";\n\n    // setting time for the second newApi Call //\n    let dailyDate = new Date()\n    // setting hours for the second newApi Call //\n    dailyDate.setHours(-30, 0, 0, 0)\n    // converting into the format i need in order for it to be valid foe the second api //\n    dailyDate = dailyDate.toISOString().slice(0, 10);\n    \n        const { data: newApi } = await axios ({\n      url: newApiResponse,\n      method: `GET`,\n      params: {\n        iso: `CAN`,\n        date: dailyDate, \n      },\n      headers :{\n        'x-rapidapi-key': '63fefd3bbbmsh7e07abc4e3d579bp14f7e0jsnc007e001acd6',\n        'x-rapidapi-host': 'covid-19-statistics.p.rapidapi.com'\n      }\n    });\n\n        const { data: newApiWidget } = await axios ({\n      url: newApiResponse,\n      method: `GET`,\n      params: {\n        iso: `CAN`,\n        date: dailyDate, \n      },\n      headers :{\n        'x-rapidapi-key': '63fefd3bbbmsh7e07abc4e3d579bp14f7e0jsnc007e001acd6',\n        'x-rapidapi-host': 'covid-19-statistics.p.rapidapi.com'\n      }\n    });\n\n      //   const { data: newApiDate } = await axios ({\n      // url: newApiResponseDate,\n      // method: `GET`,\n      // params: {\n      //   from: fromDate,\n      //   to: toDate,\n      //   iso: `CAN`,\n      //   date: '2021-02-14',\n      // },\n      // headers :{\n      //   'x-rapidapi-key': '63fefd3bbbmsh7e07abc4e3d579bp14f7e0jsnc007e001acd6',\n      //   'x-rapidapi-host': 'covid-19-statistics.p.rapidapi.com'\n      // }\n      //     });\n\n    const { data: canadianSummaryAll } = await axios({\n      url: provinceDataURL,\n      method: `GET`,\n      params: {\n        from: fromDate,\n        to: toDate,\n      },\n    });\n\n    // const { data: canadianSummaryCanada } = await axios({\n    //   url: summaryDataURL,\n    //   method: `GET`,\n    // });\n\n    this.setState({\n      newApi: newApi.data,\n      widgetDataData: newApiWidget.data[10],\n      canadianSummaryAll,\n      // canadianSummaryCanada: canadianSummaryCanada.Countries[30],\n      loading: false,\n    });\n    this.firstDataGather()\n    // console.log(this.state.newApi)\n    console.log(this.state.canadianSummaryCanada)\n    // console.log(this.state.newApi)\n    // console.log(this.state.allProvinceData.data)\n    // console.log(this.state.newApi[0].region.province)\n    // console.log(this.state.allProvinceData[0].Region)\n  }\n\n  firstDataGather() {  \n    let allProvincialStats = this.state.newApi.map((provinceDataSets) => {\n      return {\n        Active: provinceDataSets.active,\n        Confirmed: provinceDataSets.confirmed,\n        Deaths: provinceDataSets.deaths,\n        Fatality: provinceDataSets.fatality_rate,\n        Recovered: provinceDataSets.recovered,\n        Region: provinceDataSets.region,\n        Date: provinceDataSets.date\n      };\n    });\n    this.setState({\n      allProvinceData: allProvincialStats,\n    });\n    this.secondDataGather()\n  };\n\n    secondDataGather() {  \n    let allProvincialStatsRegions = this.state.allProvinceData.map((provinceDataSetsTwo) => {\n      const returnedCoordinates = {\n        Latitude: provinceDataSetsTwo.Region.lat,\n        Longitude: provinceDataSetsTwo.Region.long,\n        Province: provinceDataSetsTwo.Region.province,\n      };\n      return returnedCoordinates;\n    });\n    this.setState({\n      allRegionProvinceData: allProvincialStatsRegions,\n    });\n    this.coordinateValuesTwo() \n  };\n\n  // provinceGraph = (singleProvince) => {\n  //   let provinceHistoricalData = this.state.canadianSummaryAll.filter(\n  //     (provinceName) => {\n  //       return provinceName.Province === singleProvince.Province\n  //         ? {\n  //           finalizedCases: provinceName,\n  //         }\n  //         : null;\n  //     }\n  //   );\n  //   this.setState({\n  //     historicalProvinceDataForGraph: provinceHistoricalData,\n  //   });\n  // };\n\n  // map through the canadian canada summary and kick out province and case number. then filter through through that, if case = 0 remove it from the array // \n\n  // Add a unique key, for each set in the array // \n  // functionForLineGraph = (provinceInfoForLineGraph) => {\n  //   let filteredSpecificProvince = this.state.canadianSummaryLineGraph.filter(\n  //     (e) => {\n  //       return e.Province === provinceInfoForLineGraph\n  //         ? {\n  //           Cases: e.Cases,\n  //           Date: e.Date,\n  //           Province: e.Province,\n  //         }\n  //         : null;\n  //     }\n  //   );\n  //   this.setState({ fullProvinceTimeline: filteredSpecificProvince }, () => {\n  //     this.coordinateValues();\n  //   });\n  // };\n\n  // coordinateValues() {\n  //   let lineGraphArray = this.state.fullProvinceTimeline.map((e) => {\n  //     let data = { Date: e.Date, Cases: e.Cases };\n  //     return data;\n  //   });\n  //   this.setState({\n  //     handOffToLineGraph: lineGraphArray,\n  //   });\n  // }\n\n    coordinateValuesTwo() {\n    let lineGraphArray = this.state.allProvinceData.map((e) => {\n      let data = { Date: e.Region.province, Cases: e.Confirmed };\n      return data;\n    });\n    this.setState({\n      handOffToLineGraphTwo: lineGraphArray,\n    });\n  }\n\n\n  render() {\n    // console.log(this.state.allRegionProvinceData)\n    // console.log(this.state.allProvinceData)\n    const {\n      allProvinceData,\n      canadianSummaryAll,\n      handOffToLineGraphTwo,\n      // allRegionProvinceData,\n      widgetDataData,\n      canadianSummaryCanada,\n      graphComponentData,\n      // handOffToLineGraph,\n    } = this.state;\n    if (this.state.loading) {\n      return (\n        <div className=\"loadScreen\">\n          <Loader\n            type=\"MutatingDots\"\n            color=\"#4f7cff\"\n            secondaryColor=\"#f35163\"\n            height={100}\n            width={100}\n          />\n        </div>\n      );\n    }\n    return (\n      <motion.div>  \n        <main className=\"section\">\n          <div className=\"columns is-centered\">\n            <div className=\"column is-3\"></div>\n            <div className=\"column is-5 \">\n              <LogoMain />\n            </div>\n            <div className=\"column is-4\"></div>\n          </div>\n          <section className=\"columns\">\n            <div className=\"column is-3\">\n              <BarGraph\n                barChartInfo={allProvinceData}\n                lineGraphHandler={this.functionForLineGraph}\n              />\n            </div>\n            <div className=\"column is-5\">\n              <motion.div whileHover={{ scale: 1.01, y: \"-20px\" }}>\n                <Map markerData={canadianSummaryAll} />\n              </motion.div>\n            </div>\n            <div className=\"column is-4\">\n              <Widget \n                widgetData={canadianSummaryCanada} \n                />\n              <WidgetTwo \n                widgetDataTwo={widgetDataData} \n                />\n              <motion.div\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9, x: \"-5px\", y: \"5px\" }}\n              >\n                <LineGraph\n                  graphStyle={graphComponentData}\n                  lineGraphFinalFunction={handOffToLineGraphTwo}\n                />\n              </motion.div>\n            </div>\n          </section>\n        </main>\n      </motion.div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}